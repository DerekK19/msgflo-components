#!/bin/bash
# Start the components needed by msgflo, then start the package including the specified graph

# Derek Knight
# Jun 2019

# Setting MSGFLO_SETUP to true will use the msgflo_setup program to start the components,
# However this has the disadvantage that the components will not be stopped on repeated runs

# Using msgflo_nodejs to start the components does not have this limitation.
# Just using Control-C to stop the running npm process will shut down the components

MSGFLO_SETUP='false'

debug_flag='false'
debug_file="tmp/debug.log"
graph_file="graphs/main.json"
verbose='false'

print_usage() {
  echo "Usage: '$0' -d -g <graph file>"
  echo " Parameters"
  echo "  -d              - Turn on debugging (default off)"
  echo "  -v              - Turn on verbose mode (default off)"
  echo "  -g <graph file> - Specify the graph file to use (default graphs\main.json)"
}

while getopts 'dg:v' flag; do
  case "${flag}" in
    d) debug_flag='true' ;;
    g) graph_file="${OPTARG}" ;;
    v) verbose='true' ;;
    *) print_usage
       exit 1 ;;
  esac
done

if [ ! -f "${graph_file}" ]; then
  echo "Graph file '${graph_file}' not found"
  exit 2
fi

export PATH=./node_modules/.bin:$PATH
export MSGFLO_BROKER="mqtt://pub_client:password@mqttserver"
export GRAPH="tmp/main.json"
if [ ${debug_flag} == 'true' ]; then
  export DEBUG="*"
fi

rm -f ${debug_file}
cp ${graph_file} ./tmp/main.json

if [ ${MSGFLO_SETUP} == 'true' ]; then
  msgflo-setup ${graph_file} --componentdir ./components --participants
else

  # Register all available components. Give them a role that starts with component/
  for file in ./components/*.yml; do
    filename=$(basename -- "$file")
    ext="${filename##*.}"
    stem="${filename%.*}"
    if [ ${verbose}  == 'true' ]; then
      echo "reguister component/${stem}:components/${stem}.yml"
    fi
    msgflo-register --role component/${stem}:components/${stem}.yml 2>> ${debug_file} &
  done

  # Parse the graph for any components used
  # processes=`ruby ./parse_components.rb ${graph_file}`
  processes=`jq < ${graph_file} '.processes | to_entries | map_values (.value + { kye: .key } )[] | "--" + .kye + " " + .component + ".coffee"'`

  # Start the components
  IFS_BAK=$IFS
  IFS=$'\n'
  for process in $processes; do
    process="${process%\"}"
    process="${process#\"}"
    if [ ${verbose}  == 'true' ]; then
      echo "nodejs ${process}"
    fi
    eval "msgflo-nodejs ${process} 2>> ${debug_file}" &
  done
  IFS=$IFS_BAK
  IFS_BAK=

  # Start npm, which will start msgflo and will register the components.
  # Leave this running in the foreground. stop with Control-C, and that will also stop the components
  npm start 2>> ${debug_file}
fi
